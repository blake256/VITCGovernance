pragma soliditypp ^0.4.3;

contract VITCProposalContract
{
  /**************************|
  |        Structures        |
  |_________________________*/


  // Voting stats structure
  struct VotingStats
  {
    uint m_optionTotalVotes;
    uint m_optionVotingPower;
  }

  // Proposal structure
  struct ProposalObj
  {
    string m_id;
    address m_creator;
    uint m_publishDate;
    uint m_deadline;
    uint m_totalVotingPower;
    uint m_totalVotes;
    mapping(address => bool) m_prevVotersMap;
    mapping(uint => VotingStats) m_optVoteStatsMap;
  }


  /***********************|
  |        Globals        |
  |______________________*/


  // Global proposals container
  mapping(string => ProposalObj) g_ProposalsMap;

  // Address of the contract creator
  address g_contractOwner;
  // Whitelisted addresses allowed to create proposals
  mapping(address => bool) g_whitelistedAddrs;

  // Number of proposals total
  uint g_totalNumProposals;
  // Number of proposals active
  uint g_totalActiveProposals;
  // Number of proposals cancelled
  uint g_totalCancelledProposals;


  /**********************|
  |        Events        |
  |_____________________*/


  // Event that will be emitted whenever a new proposal is created
  event ProposalStartedEvent(string proposalID, address proposalCreator, uint proposalDeadline, uint totalNumProposals, uint totalActiveProposals);

  // Event that will be emitted whenever a proposal ends
  event ProposalEndedEvent(string proposalID, address proposalCreator, uint endDate);
  // event ProposalEndedEvent(string proposalID, address proposalCreator, uint[] optsTotalVotes, uint[] optsTotalPowers, uint endDate);

  // Event emitted whenever a proposal receives a vote
  event ProposalVotedOnEvent(string proposalID, address proposalVoter, uint totalVotes);


  /***************************|
  |        Constructor        |
  |__________________________*/


  /** @dev Contract Constructor
    */
  constructor() public
  {
    g_contractOwner = msg.sender;
    g_whitelistedAddrs['vite_9a4c9281f8770751f7281a6a89f2d32c30d45d322304c447a9'] = true;
    g_whitelistedAddrs['vite_1e6fcaa6ade80cb29b981bc70b2e8396bbdfd70a04e6164705'] = true;
    g_whitelistedAddrs['vite_35eb308163240448ef80b2ff998b94aed4791515c1d458aca8'] = true;
    g_whitelistedAddrs['vite_6e5dd5af585f81f7913c4d54634fcd3a989ce37a7a9e839576'] = true;
  }


  /******************************************|
  |        Whitelisted-Only Functions        |
  |_________________________________________*/


  /** @dev Function to start a new proposal.
    *
    */
  onMessage startProposal(string calldata id, uint durationInHours, uint numOptions)
  {
    // Only whitelisted addrs can create a new proposal atm
    require(g_whitelistedAddrs[msg.sender]);

    uint proposalDeadline = (now + (durationInHours * 1 hours));

    g_ProposalsMap[id] = (ProposalObj(id, msg.sender, now, proposalDeadline, 0, 0));

    for (uint i = 0; i < numOptions; ++i)
    {
      g_ProposalsMap[id].m_optVoteStatsMap[i] = VotingStats(0, 0);
    }

    ++g_totalNumProposals;
    ++g_totalActiveProposals;

    emit ProposalStartedEvent(id, msg.sender, proposalDeadline, g_totalNumProposals, g_totalActiveProposals);
  }


  /********************************|
  |        Public Functions        |
  |_______________________________*/


  /** @dev Function to vote on a given proposal.
    *
    */
  onMessage submitVote(string calldata proposalID, uint[] calldata optPowers)
  {
    require(!g_ProposalsMap[proposalID].m_prevVotersMap[msg.sender]);
    require(now < g_ProposalsMap[proposalID].m_deadline);
    uint sum = 0;
    for (uint i = 0; i < optPowers.length; ++i)
    {
      sum += optPowers[i];
    }
    require(sum <= 100);
    require(sum > 0);

    uint proposalTotalVotes = ++g_ProposalsMap[proposalID].m_totalVotes;
    g_ProposalsMap[proposalID].m_prevVotersMap[msg.sender] = true;

    for (uint i = 0; i < optPowers.length; ++i)
    {
      ++g_ProposalsMap[proposalID].m_optVoteStatsMap[i].m_optionTotalVotes;
      g_ProposalsMap[proposalID].m_optVoteStatsMap[i].m_optionVotingPower += optPowers[i];
    }

    emit ProposalVotedOnEvent(proposalID, msg.sender, now);
  }


  /**************************************|
  |        Creator-Only Functions        |
  |_____________________________________*/


  /** @dev Stop the proposal early if desired (mostly for testing purposes)
    *
    */
  onMessage stopProposalEarly(string calldata proposalID)
  {
    require(g_ProposalsMap[proposalID].m_creator == msg.sender);

    emit ProposalEndedEvent(proposalID, g_ProposalsMap[proposalID].m_creator, now);
  }


  /************************************|
  |        Owner-Only Functions        |
  |___________________________________*/


  /** @dev Admin function called at the end of a proposal
    *
    */
  onMessage adminProposalEnd(string calldata proposalID, uint totalVotingPower, uint[] calldata optionVotingTotals)
  {
    require(g_contractOwner == msg.sender);

    g_ProposalsMap[proposalID].m_totalVotingPower = totalVotingPower;
    for (uint i = 0; i < optionVotingTotals.length; ++i)
    {
      g_ProposalsMap[proposalID].m_optVoteStatsMap[i].m_optionVotingPower = optionVotingTotals[i];
    }

    emit ProposalEndedEvent(proposalID, g_ProposalsMap[proposalID].m_creator, now);
  }


  /***********************|
  |        Getters        |
  |______________________*/


  /**
    */
  getter getProposalStats() returns(
    uint total,
    uint active,
    uint cancelled)
  {
    total = g_totalNumProposals;
    active = g_totalActiveProposals;
    cancelled = g_totalCancelledProposals;
  }


  /**
    */
  getter getProposalVotingStats(string calldata proposalID) returns(
    uint totalVotingPower,
    uint totalVotes)
  {
    totalVotingPower = g_ProposalsMap[proposalID].m_totalVotingPower;
    totalVotes = g_ProposalsMap[proposalID].m_totalVotes;
  }


  /**
    */
  getter getProposalByID(string calldata proposalID) returns (
    address creator,
    uint publishDate,
    uint deadline,
    uint totalVotingPower,
    uint totalVotes)
  {
    creator = g_ProposalsMap[proposalID].m_creator;
    publishDate = g_ProposalsMap[proposalID].m_publishDate;
    deadline = g_ProposalsMap[proposalID].m_deadline;
    totalVotingPower = g_ProposalsMap[proposalID].m_totalVotingPower;
    totalVotes = g_ProposalsMap[proposalID].m_totalVotes;
  }


  /**
    */
  getter checkIfVotedPreviously(address voter, string calldata proposalID) returns (
    bool hasVoted)
  {
    hasVoted = g_ProposalsMap[proposalID].m_prevVotersMap[voter];
  }


  /**
    */
  getter getIsProposalComplete(string calldata proposalID) returns(
    bool isComplete)
  {
    if (now > g_ProposalsMap[proposalID].m_deadline)
    {
      return true;
    }

    return false;
  }


  /******************************************|
  |        Private/Internal Functions        |
  |_________________________________________*/


  /** @dev Function to change the proposal state depending on conditions.
    *
    */
  function _checkIsComplete(string memory proposalID) internal returns(bool)
  {
    if (now > g_ProposalsMap[proposalID].m_deadline)
    {
      emit ProposalEndedEvent(proposalID, g_ProposalsMap[proposalID].m_creator, now);
      return true;
    }

    return false;
  }
}
